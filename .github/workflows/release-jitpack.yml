name: JitPack Release
on:
  push:
    branches:
      - main
      - master

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_TOKEN }}
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Configure Git
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "GitHub Actions"

      - name: Get Android Version
        id: android_version
        run: |
          if [ -f "app/build.gradle.kts" ]; then
            VERSION=$(grep -oP 'versionName\s*=\s*"\K[^"]+' app/build.gradle.kts || echo "")
            if [ ! -z "$VERSION" ]; then
              echo "Using version from build.gradle.kts: $VERSION"
              echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
              echo "VERSION_SOURCE=gradle" >> $GITHUB_OUTPUT
            else
              FALLBACK_VERSION=$(date +'%Y%m%d')-$(git rev-parse --short HEAD)
              echo "No version found in build.gradle.kts, using fallback: $FALLBACK_VERSION"
              echo "VERSION=$FALLBACK_VERSION" >> $GITHUB_OUTPUT
              echo "VERSION_SOURCE=fallback" >> $GITHUB_OUTPUT
            fi
          else
            FALLBACK_VERSION=$(date +'%Y%m%d')-$(git rev-parse --short HEAD)
            echo "build.gradle.kts not found, using fallback: $FALLBACK_VERSION"
            echo "VERSION=$FALLBACK_VERSION" >> $GITHUB_OUTPUT
            echo "VERSION_SOURCE=fallback" >> $GITHUB_OUTPUT
          fi

      - name: Create Release Tag
        id: create_tag
        run: |
          VERSION="v${{ steps.android_version.outputs.VERSION }}"
          echo "Creating new tag: $VERSION"
          git tag $VERSION
          git push origin $VERSION
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.create_tag.outputs.version }}
          generate_release_notes: true
          token: ${{ secrets.GH_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Wait for tag to propagate
        run: sleep 30

      - name: Trigger JitPack Build
        run: |
          REPO_OWNER=$(echo "${{ github.repository }}" | cut -d'/' -f1)
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          VERSION="${{ steps.create_tag.outputs.version }}"
          VERSION_WITHOUT_V="${VERSION#v}"
          
          # First request to trigger the build
          curl -X GET "https://jitpack.io/com/github/$REPO_OWNER/$REPO_NAME/$VERSION_WITHOUT_V/build.log" || true
          
          # Wait for JitPack to start processing
          sleep 60
          
          # Second request to check build status
          HTTP_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "https://jitpack.io/com/github/$REPO_OWNER/$REPO_NAME/$VERSION_WITHOUT_V/$REPO_NAME-$VERSION_WITHOUT_V.pom")
          
          if [ "$HTTP_RESPONSE" = "200" ]; then
            echo "JitPack build completed successfully"
          else
            echo "JitPack build status: $HTTP_RESPONSE"
            echo "Check build status at: https://jitpack.io/#$REPO_OWNER/$REPO_NAME/$VERSION"
          fi